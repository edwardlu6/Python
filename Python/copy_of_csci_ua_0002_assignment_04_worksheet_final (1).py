# -*- coding: utf-8 -*-
"""Copy of CSCI_UA_0002_Assignment_04_Worksheet-FINAL.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sL63bjiLx0JXIi1mREvW9PvC1nxtK5Fn

# CSCI-UA.0002 Assignment 04 Worksheet

This is a Python "Notebook" which contains text and code packaged up into a single document.  

**To get started click the File menu and select Save.  This will allow you to edit this document and will cause the system to save a copy of this notebook into your own Google account.**

For this assignment you will be working through a series of challenges. After each challenge you will see some space for you to write code - this is where you should type your solution to the that particular challenge.  **Please do not create any new code units in this Notebook - this will help the course graders when the begin to evaluate your work.**

When you are finished you should click the File menu and select Download.  Download BOTH a copy of the .ipynb file AND the .py file.  Submit these files to Brightspace under the "Assignment 04" category.

**IMPORTANT NOTE: You must use `while` loops for these programs.  You are not allowed to use a `for` loop (we will cover this loop when we get to module 5)**

# Task 1: Simple Repetition

Prompt the user for two integers greater than or equal to zero.  You can always assume that the user will enter two valid integers when prompted.  Then report the following:

* The sum of the integers, including the full expression used (e.g. `1 + 1 = 2`)
* The difference between the two integers, including the full expression used (e.g. `1 - 1 = 0`) 
* The product of the two integers, including the full expression used (e.g. `2 * 2 = 4`) 
* The first number divided by the second number, including the full expression used (e.g. `10 / 2 = 5`) - keep in mind that dividing by 0 will result in a runtime error, so in this case your program should report that the result of the expression is `undefined`

Allow the user to continue to perform these actions as long as they desire.  Here is a sample running of the program:

```
Enter integer #1: 10
Enter integer #2: 5

10 + 5 = 15
10 - 5 = 5
10 * 5 = 50
10 / 5 = 2.0

Would you like to enter another set of integers? (yes/no) yes
Enter integer #1: 3
Enter integer #2: 6

3 + 6 = 9
3 - 6 = -3
3 * 6 = 18
3 / 6 = 0.5

Would you like to enter another set of integers? (yes/no) yes
Enter integer #1: 107
Enter integer #2: 0

107 + 0 = 107
107 - 0 = 107
107 * 0 = 0
107 / 0 = undefined

Would you like to enter another set of integers? (yes/no) no

Program ending
```
"""

4# Write your code for Task 1 here
num1 = int(input("Enter a number:"))
num2 = int(input("Enter a number:"))

while True:
  print(num1, "+", num2, "=", num1 + num2)
  print(num1, "-", num2, "=", num1 - num2 )
  print(num1, "*", num2, "=", num1 * num2)
  if num2 == 0:
    print(num1, "/", num2, "=", "undefined")
  else:
    print(num1, "/", num2, "=", num1 / num2)
  loop = input("Would you like to enter another set of integers? (yes/no)")

  if loop == "yes":
    continue
  if loop == "no":
    print("Program ending")
    break

"""# Task 2: Accumulator Variables

Write a program that prompts the user to provide a potentially unlimited number of test scores.  You can always assume the user will enter in a score as an integer between 0 and 100, and you can assume they will always enter at least one test score.  When the user chooses to stop entering scores report the following:

* How many test scores the user entered 
* The total points earned
* The average score

Here's a sample running of the program:

```
Enter a test score between 0 and 100: 90
Would you like to enter another test score? (yes/no): yes
Enter a test score between 0 and 100: 80
Would you like to enter another test score? (yes/no): yes
Enter a test score between 0 and 100: 70
Would you like to enter another test score? (yes/no): yes
Enter a test score between 0 and 100: 60
Would you like to enter another test score? (yes/no): no
# of scores entered: 4
Total points earned: 300
Average score: 75.0
```

Note: you can always assume the user will enter the values 'yes' or 'no' when prompted.
"""

# Write your code for Task 2 here
total = 0
while True:
  num = int(input("Enter a test score:"))
  time = 1
  time += 1
  total += num
  loop = input("Would you like to enter another test score? (yes/no)")
  if loop == "yes":
    continue
  if loop == "no":
    print("# of scores entered:", time)
    print("Total points earned:", total)
    print("Average score:", total / time)
    break

"""# Task 3: Count Controlled Loops

Write a program that prompts the user for an integer (referred to as `n` in the instructions below).  You can always assume the user will type a positive integer greater than 1, but you cannot assume the size of the integer provided.

Next, generate a series of outputs using the provided integer:

* A range of numbers starting from 1 going up to `n`.  For example, if the user enters `7` you would generate the numbers 1, 2, 3, 4, 5, 6 and 7
* A 'triangle' pattern made up of a series of `*` characters. The "top" of the triangle will contain `n` stars, and the next line will contain `n-1` stars, all the way to the last line that will contain just 1 star.

Here's a sample running of the program:

```
Enter an integer greater than 1: 7
1
2
3
4
5
6
7
*******
******
*****
****
***
**
*
```
"""

# Write your answer to Task 3 here
num = int(input("Enter an integer greater than 1:"))
initial = 1
while initial <= num:
  print(initial)
  initial += 1

new_initial = num
while num >= new_initial:
  print("*" * new_initial)
  new_initial -= 1
  if new_initial < 1:
    break

"""# Task 4: Data Validation

Write a program that prompts the user for two integers.  Both integers must be positive, and the second integer must be larger than the first.  The user will always enter an integer when prompted, but they may enter a value that is out of the expected range. If this happens you should re-prompt the user as many times as is necessary

When you are finished print out all of the that exist within a range beginning with the first value and ending with the last value.  For example:

```
Enter the first number: -5
Invalid, try again

Enter the first number:  5
Accepted!

Enter the second number:  -10
Invalid, try again

Enter the second number:  3
Invalid, try again

Enter the second number:  12
Accepted!

5
6
7
8
9
10
11
12
```

"""

from os import cpu_count
# Write your code for task 4 here
while True:
  num1 = int(input("Enter the first number:"))
  if num1 > 0:
    print("Accepted!")
    print()
    break
  else:
    print("Invalid, try again")
    print()
    continue

while True:
  num2 = int(input("Enter the second number:"))
  if num1 < num2:
    print("Accepted!")
    print()
    break
  else:
    print("Invalid, try again")
    print()
    continue

count = num1
while num1 <= num2:
  print(count)
  count +=1
  num1 +=1