# -*- coding: utf-8 -*-
"""CSCI_UA_0002_Assignment_06_Worksheet_FINAL_01.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sNN3OgewN7lmYelGuWXqAnc5ogjVg0ND

# CSCI-UA.0002 Assignment 06 Worksheet

This is a Python "Notebook" which contains text and code packaged up into a single document.  

**To get started click the File menu and select Save.  This will allow you to edit this document and will cause the system to save a copy of this notebook into your own Google account.**

For this assignment you will be working through a series of challenges. After each challenge you will see some space for you to write code - this is where you should type your solution to the that particular challenge.  **Please do not create any new code units in this Notebook - this will help the course graders when the begin to evaluate your work.**

When you are finished you should click the File menu and select Download.  Download BOTH a copy of the .ipynb file AND the .py file.  Submit these files to Brightspace under the "Assignment 06" category.

# Task 0: Your Information
"""

#@title Please provide your full name and your Net ID (your email address without the '@nyu.edu' portion) - you do not need to click the 'run' button or write any code for this task.
first_name = "Edward" #@param {type:"string"}
last_name = "Lu" #@param {type:"string"}
net_id = "gl2576" #@param {type:"string"}

"""# Task 1: Simple Function Calls

For this task you will be translating some simple math expressions into function calls. Here are the rules:

* You can only write a single line of code for each challenge
* You cannot use any math operations (i.e. +, -, /, *, // or % are strictly prohibited)
* You cannot use any print statements
* You cannot reduce your terms (i.e. if you are asked to translate 1+2+3 you can't simply add these together yourself and supply the number 5 to the program)
* The only thing you can use are calls to the functions below, in any order
* You cannot use any calls to any functions other than the ones above (e.g. `input`, `len`, etc. are all prohibited)

You can assume that these functions are defined in your program and are ready to be used.

```
def add(a,b):
    '''
    input:       two integers or floats
    processing:  adds the two supplied values
    output:      returns the sum (integer/float)
    '''
    return a+b

def sub(a,b):
    '''
    input:       two integers or floats
    processing:  subtracts the second value from the first value
    output:      returns the difference (integer/float)
    '''
    return a-b

def mult(a,b):
    '''
    input:       two integers or floats
    processing:  multiplies the two supplied values
    output:      returns the product (integer/float)
    '''
    return a*b

def div(a,b):
    '''
    input:       two integers or floats
    processing:  divides the first value by the second value
    output:      returns the sum (integer/float)
    '''
    return a/b
    
def sqrt(a):
    '''
    input:       one integer/float
    processing:  computes the square root of the supplied value
    output:      returns the square root (float)
    '''
    return a**0.5

def square(a):
    '''
    input:       one integer/float
    processing:  raises the supplied integer/float to the 2nd power
    output:      returns the square (integer/float)
    '''
    return a**2
```

Here is an example to get you started:

```
# translate this expression: 3 * 2 + 5
```

You can solve this by create a function call that looks like the following:

```
add(mult(3,2),5)
```
"""

from re import escape
#@title Enter your answers below. Then click the "run" button to check your work.  Remember that you can only use the `add`, `sub`, `mult`, `div`, `square` and `sqrt` functions to solve these questions.

#@markdown Translate this expression into function calls: `(3-4) + (1*2)`
answer1 = "add(sub(3,4), mult(1,2))" #@param {type:"string"}

#@markdown Translate this expression into function calls: `5 + 1 + 7 + 9 + 13 + 12`
answer2 = "add(add(add(add(add(5,1), 7), 9), 13), 12)" #@param {type:"string"}

#@markdown Translate this expression into function calls: `(5 + 1) / (7 + 2 + 3)`
answer3 = "div(add(5,1), add(add(2, 3), 7))" #@param {type:"string"}

#@markdown Compute the distance between these two points by implementing the distance formula using function calls: `(0,0)` and `(100,100) `- the distance formula is $d=\sqrt{(x1-x2)^2+(y1-y2)^2}$
answer4 = "sqrt(add(square(sub(0, 100)), square(sub(0, 100))))" #@param {type:"string"}

def add(a,b):
  '''
  input:       two integers or floats
  processing:  adds the two supplied values
  output:      returns the sum (integer/float)
  '''
  return a+b

def sub(a,b):
  '''
  input:       two integers or floats
  processing:  subtracts the second value from the first value
  output:      returns the difference (integer/float)
  '''
  return a-b

def mult(a,b):
  '''
  input:       two integers or floats
  processing:  multiplies the two supplied values
  output:      returns the product (integer/float)
  '''
  return a*b

def div(a,b):
  '''
  input:       two integers or floats
  processing:  divides the first value by the second value
  output:      returns the sum (integer/float)
  '''
  return a/b
    
def sqrt(a):
  '''
  input:       one integer/float
  processing:  computes the square root of the supplied value
  output:      returns the square root (float)
  '''
  return a**0.5

def square(a):
  '''
  input:       one integer/float
  processing:  raises the supplied integer/float to the 2nd power
  output:      returns the square (integer/float)
  '''
  return a**2

# incomplete data validation
def validate(s):
  invalid_characters = "+-*/%"
  for c in s:
    if c in invalid_characters:
      return False
  if s.isdigit():
    return False
  try:
    float(s)
  except:
    pass
  else:
    return False
  return True

# define expected results
expected_results = [1, 47, 0.5, 141.4213562373095]

# package up answers
answers = [answer1, answer2, answer3, answer4]

# test answers
for i in range(len(answers)):
  try:
    print("ANSWER", i+1)
    if not(validate(answers[i])):
      print("* Incorrect (math operator or numeric literal detected - you are only allowed to use calls to the provided functions)")
      continue
    result = eval(answers[i])
    print("* Evaluation:", answers[i], '->', result)
    print("* Expected:", expected_results[i])
    if result == expected_results[i]:
      print("Correct!")
    else:
      print("Incorrect")
  except:
    print("Incorrect (error evaluating answer)")

  print()

"""# Task 2

Write two functions called `maximum` and `minimum`.  These function should accept two arguments and **return** the larger/smaller of the two supplied values. For the purpose of this program you can always assume that the arguments being supplied are numeric. Describe your functions using IPO notation.

**Ensure that you functions don't just print the output! The maximum / minimum values need to be returned, not printed**
"""

# Write your 'maximum' and 'minimum' function definitions in this code block
def maximum(a,b):
  '''
  Input: two arguments of integers
  Processing: compare the value of the two arguments. If one of the values is bigger, then it is returned.
  Output: return the larger value
  '''
  if a > b:
    return a
  elif a < b:
    return b
  elif a == b:
    return a

def minimum(a,b):
  '''
  Input: two arguments of integers
  Processing: compare the value of the two arguments. If one of the values is smaller, then it is returned.
  Output: return the smaller value
  '''
  if a > b:
    return b
  elif a < b:
    return a
  elif a == b:
    return a







# Don't write any test code in here -- the next code block contains test code 
# that you can use to check your work

"""When you are ready to test your work click the "run" button on the cell above to load your functions.  Then click the run button on the cell below to run the tester code.  The expected output is listed in the comments of the source code."""

a = 5
b = 10
c = 15
d = 20
e = 20

ans1 = maximum(a,b)
ans2 = maximum(a,c)
ans3 = maximum(a,d)
print (ans1,ans2,ans3) # expected output: 10 15 20

ans4 = minimum(d,c)
ans5 = minimum(d,b)
ans6 = minimum(d,a)
print (ans4,ans5,ans6) # expected output: 15 10 5

ans7 = maximum( maximum(a,b), maximum(c,d) )
print ("The biggest is:", ans7) # expected output: the biggest is: 20

ans8 = maximum(d,e) # d and e are the same, so either is considered the maximum
ans8 = minimum(d,e) # d and e are the same, so either is considered the minimum
print(ans8, ans8) # expected output: 20 20

"""# Task 3: Valid Date Function

Write a function called `valid_date` which accepts two arguments - a month and a day (both integers, will always be integers). Test to see if the date being described is valid or not. If the date is valid your function should return a `True` value (Boolean), and if it is not it should return a `False` value (Boolean). 

For the purpose of this program you can assume February has 28 days. Describe your function using IPO notation.
"""

# Write your 'valid_date' function definition in this code block
def valid_date(a, b):
  '''
  Input: two arguments of integers. One is a month in range of 1 and 12, The other is a day in range of 1 and 31
  Processing: check if the date is a valid date. If the month is 2, the range of a day is 1 and 28. If the month is 4, 6, 9, 11, the range of a day is 1 and 30. For other months, the range of day is 1 and 31.
  Output: If a date is valid, the function will retrun True. If a date is invalid, the function will return False.
  '''
  if a in range(1, 13) and b in range(1, 32):

    if a == 2 and b in range(1, 29):
      return True
    elif a == 2 and b >= 29:
      return False
    elif a in [4, 6, 9, 11] and b in range(1, 31):
      return True
    elif a in [4, 6, 9, 11] and b >= 31:
      return False
    return True
  else:
    return False





# Don't write any test code in here -- the next code block contains test code 
# that you can use to check your work

"""When you are ready to test your work click the "run" button on the cell above to load your functions.  Then click the run button on the cell below to run the tester code.  The expected output is listed in the comments of the source code."""

print(valid_date(99,1)) # False
print(valid_date(1,99)) # False
print(valid_date(99,99)) # False

print(valid_date(-99,1)) # False
print(valid_date(1,-99)) # False
print(valid_date(-99,-99)) # False

print(valid_date(9,25)) #True
print(valid_date(10,15)) # True
print(valid_date(11,31)) # False
print(valid_date(2,28)) # True
print(valid_date(2,29)) # False

"""# Task 4: Simple Sort Version 1

Write a function called `simple_sort_version1` that accepts two values.  You can assume that your two values will always be the same data type (all ints, all floats or all strings).

Sort these two values in ascending order and **return** them in that order.  Note that you function needs to return two values, not just one. In the case of strings, sort the strings in ascending ASCII order (not size order).
"""

# Write your 'simple_sort_version1' function definition in this code block
def simple_sort_version1(a, b):
  if a > b:
    return b, a
  elif a < b:
    return a, b
  elif a == b:
    return a, b





# Don't write any test code in here -- the next code block contains test code 
# that you can use to check your work

"""When you are ready to test your work click the "run" button on the cell above to load your functions.  Then click the run button on the cell below to run the tester code.  The expected output is listed in the comments of the source code."""

# your function should work perfectly with the following lines of code
a,b = simple_sort_version1(10,20)
print(a,b) # 10 20

a,b = simple_sort_version1(20,10)
print(a,b) # 10 20

a,b = simple_sort_version1(30,30)
print(a,b) # 30 30

"""# Task 5: Simple Sort Version 2

Write a function called `simple_sort_version2` that accepts three values.  You can assume that your three values will always be the same data type (all ints, all floats or all strings).

Sort these values in ascending order and **return** them. Note that your function needs to return three values, not just one. In the case of strings, sort the strings in ascending ASCII order (not size order). You are allowed to use the `simple_sort_version1` function in your solution if you'd like (but it's not necessary and you won't be penalized if you don't)

"""

# Write your 'simport_sort_version2' function definition in this code block

def simple_sort_version2(a, b, c):
  if a > b > c:
    return c, b, a
  elif a < b < c:
    return a, b, c
  elif b > a > c:
    return c, a, b
  elif a > c > b:
    return b, c, a
  elif b > c > a:
    return a, c, b
  elif c > a > b:
    return b, a, c
  elif a == b == c:
    return a, b, c
  elif a == b > c:
    return c, b, a
  elif a == b < c:
    return a, b, c
  elif a == c > b:
    return b, a, c
  elif a == c < b:
    return a, c, b
  elif c == b > a:
    return a, c, b
  elif c == b < a:
    return c, b, a




# Don't write any test code in here -- the next code block contains test code 
# that you can use to check your work

"""When you are ready to test your work click the "run" button on the cell above to load your functions.  Then click the run button on the cell below to run the tester code.  The expected output is listed in the comments of the source code."""

a,b,c = simple_sort_version2(10,20,30)
print(a,b,c) # 10 20 30

a,b,c = simple_sort_version2(10,30,20)
print(a,b,c) # 10 20 30

a,b,c = simple_sort_version2(30,20,10)
print(a,b,c) # 10 20 30

a,b,c = simple_sort_version2(30,20,20)
print(a,b,c) # 20 20 30
