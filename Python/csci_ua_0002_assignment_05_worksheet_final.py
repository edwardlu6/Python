# -*- coding: utf-8 -*-
"""CSCI_UA_0002_Assignment_05_Worksheet-FINAL.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nmRY2KrjczWqzAmUrLP8z_nLy0qI8xDI

# CSCI-UA.0002 Assignment 05 Worksheet

This is a Python "Notebook" which contains text and code packaged up into a single document.  

**To get started click the File menu and select Save.  This will allow you to edit this document and will cause the system to save a copy of this notebook into your own Google account.**

For this assignment you will be working through a series of challenges. After each challenge you will see some space for you to write code - this is where you should type your solution to the that particular challenge.  **Please do not create any new code units in this Notebook - this will help the course graders when the begin to evaluate your work.**

When you are finished you should click the File menu and select Download.  Download BOTH a copy of the .ipynb file AND the .py file.  Submit these files to Brightspace under the "Assignment 05" category.

# Task 0: Your Information
"""

#@title Please provide your full name and your Net ID (your email address without the '@nyu.edu' portion) - you do not need to click the 'run' button or write any code for this task.
first_name = "Edward" #@param {type:"string"}
last_name = "Lu" #@param {type:"string"}
net_id = "gl2576" #@param {type:"string"}

"""# Task 1: Examining a String

Prompt the user to enter a word and a single character.  You can always assume the user will provide you with a valid word and a single character.

Next, examine the word and determine how many times the character has been used in the word.  Make your program case insensitive.  For example:

```
Enter a word: Pikachu is a pokemon
Enter a char: p
There are 2 p's in your word
```
"""

# write your answer to task 1 here
word = str.lower(input('Enter a word:'))
char = str.lower(input('Enter a char:'))
count = 0
for i in word:
  if char == i:
    count += 1
print('There are', count, char + "'s in your word")

"""# Task 2: Using the `range` Function

Fill in the blanks with a valid call to the range function. Then click the "run" button to check your answers. You do not need to edit the 'code' block for this question - you are simply filling in the blanks provided with valid calls to the `range` function.
"""

#@title Fill in the blanks with a valid call to the `range` function. Then click the "run" button to check your answers.
#@markdown Generate the range `[0,1,2,3,4,5]`
answer1 = "range(6)" #@param {type:"string"}
#@markdown Generate the range `[50,51,52,53,54,55]`
answer2 = "range(50, 56)" #@param {type:"string"}
#@markdown Generate the range `[10,9,8,7,6,5,4,3,2,1,0]`
answer3 = "range(10, -1, -1)" #@param {type:"string"}
#@markdown Generate the range `[10,20,30,40,50]`
answer4 = "range(10, 51, 10)" #@param {type:"string"}

# define expected results & tests
expected_results = ([0,1,2,3,4,5], [50,51,52,53,54,55], [10,9,8,7,6,5,4,3,2,1,0], [10,20,30,40,50])
answers = (answer1, answer2, answer3, answer4)

# test answers
for i in range(len(answers)):
  try:
    print("ANSWER", i+1)
    result = list(eval(answers[i]))
    print("* Evaluation:", answers[i], '->', result)
    print("* Expected:", expected_results[i])
    if result == expected_results[i]:
      print("Correct!")
    else:
      print("Incorrect")
  except:
    print("Incorrect (error evaluating answer)")

  print()

"""# Task 3: `for` Loops and Accumulator Variables

Write a program that asks the user for a lucky integer between 1 and 100 (`lucky`) and a postive number of tests (`tests`).  You can always assume the user will provide you with valid integers.

Next, generate `tests` random numbers between 1 and 100 and count how many of them match the user's lucky number.  Here are a few sample runs of the program - note that your results will be different since you are using random numbers! If you want to match my output you can use a seed of 12345 (`random.seed(12345)`)

```
Enter a lucky number between 1 and 100: 50
How many times should I test your number? 1000
After 1000 tests your number was randomly selected 15 times
```

```
Enter a lucky number between 1 and 100: 3
How many times should I test your number? 500
After 500 tests your number was randomly selected 2 times
```

```
Enter a lucky number between 1 and 100: 94
How many times should I test your number? 20000
After 20000 tests your number was randomly selected 178 times
```
"""

# write your answer to task 3 here
import random
lucky = int(input('Enter a lucky number between 1 and 100:'))
tests = int(input('How many times should I test your number?:'))
count = 0
for i in range(0,tests):
  j = random.randint(1,100)
  if lucky == j:
    count += 1
print('After', tests, 'tests your number was randomly selected', count, 'times')

"""# Task 4: Nested Loops

Write a program that prompts the user to enter two words (`word1` and `word2`) and a positive integer (`n`).  You can always assume the user will provide you with valid inputs.

Next, generate output that uses this information to produce a pattern that looks like the following:
 New Section
```
Enter first word: APPLE
Enter second word: pear
Enter a positive integer: 3

APPLE
* pear
* pear
* pear
APPLE
* pear
* pear
* pear
APPLE
* pear
* pear
* pear
```

```
Enter first word: NYU
Enter second word: Courant
Enter a positive integer: 2

NYU
* Courant
* Courant
NYU
* Courant
* Courant
```

```
Enter first word: Happy
Enter second word: Halloween
Enter a positive integer: 4

Happy
* Halloween
* Halloween
* Halloween
* Halloween
Happy
* Halloween
* Halloween
* Halloween
* Halloween
Happy
* Halloween
* Halloween
* Halloween
* Halloween
Happy
* Halloween
* Halloween
* Halloween
* Halloween
```
"""

# write your answer to task 4 here
first_word = input('Enter first word:')
second_word = input('Enter second word:')
integer = int(input('Enter a positive integer:'))
print()
for i in range(integer):
  print(first_word)
  for j in range(integer):
    print('*', second_word)
